namespace MetinClientless.Packets;

public struct PacketInfo(int size, bool isDynamicSize)
{
    public static readonly Dictionary<int, PacketInfo> Map = new Dictionary<int, PacketInfo>
    {
        // Extracted packet information in requested format
        { 90, new PacketInfo(2, false) },
        { 65, new PacketInfo(15, false) },
        { 73, new PacketInfo(2, false) },
        { 81, new PacketInfo(6, true) },
        { 82, new PacketInfo(1, false) },
        { 41, new PacketInfo(10, false) },
        { 40, new PacketInfo(3, true) },
        { 1, new PacketInfo(37, false) },
        { 136, new PacketInfo(62, false) },
        { 120, new PacketInfo(90, false) },
        { 19, new PacketInfo(44, false) },
        { 2, new PacketInfo(5, false) },
        { 3, new PacketInfo(24, false) },
        { 4, new PacketInfo(9, true) },
        { 5, new PacketInfo(3, true) },
        { 6, new PacketInfo(267, false) },
        { 32, new PacketInfo(353, false) },
        { 7, new PacketInfo(10, false) },
        { 8, new PacketInfo(69, false) },
        { 9, new PacketInfo(2, false) },
        { 10, new PacketInfo(1, false) },
        { 11, new PacketInfo(1, false) },
        { 13, new PacketInfo(5, false) },
        { 14, new PacketInfo(5, false) },
        { 15, new PacketInfo(47, false) },
        { 113, new PacketInfo(48, false) },
        { 137, new PacketInfo(73, false) },
        { 138, new PacketInfo(77, false) },
        { 16, new PacketInfo(701, false) },
        { 17, new PacketInfo(17, false) },
        { 139, new PacketInfo(9, false) },
        { 140, new PacketInfo(9, false) },
        { 143, new PacketInfo(7, false) },
        { 68, new PacketInfo(2, false) },
        { 20, new PacketInfo(45, false) },
        { 21, new PacketInfo(54, false) },
        { 142, new PacketInfo(6, true) },
        { 116, new PacketInfo(6, true) },
        { 117, new PacketInfo(10, true) },
        { 22, new PacketInfo(16, false) },
        { 25, new PacketInfo(41, false) },
        { 26, new PacketInfo(26, false) },
        { 27, new PacketInfo(5, false) },
        { 31, new PacketInfo(30, false) },
        { 28, new PacketInfo(4, false) },
        { 29, new PacketInfo(2, false) },
        { 30, new PacketInfo(3, false) },
        { 34, new PacketInfo(29, true) }, // Manualy changed dynamicSize to true idk why it was false
        { 43, new PacketInfo(6, false) },
        { 36, new PacketInfo(11, false) },
        { 38, new PacketInfo(4, true) },
        { 39, new PacketInfo(38, false) },
        { 42, new PacketInfo(54, false) },
        { 44, new PacketInfo(1, false) },
        { 45, new PacketInfo(6, true) },
        { 46, new PacketInfo(74, false) },
        { 63, new PacketInfo(9, true) },
        { 61, new PacketInfo(18, false) },
        { 18, new PacketInfo(7, false) },
        { 255, new PacketInfo(13, false) },
        { 252, new PacketInfo(1, false) },
        { 254, new PacketInfo(7, false) },
        { 62, new PacketInfo(9, false) },
        { 70, new PacketInfo(10, false) },
        { 69, new PacketInfo(17, false) },
        { 71, new PacketInfo(17, false) },
        { 156, new PacketInfo(17, false) },
        { 157, new PacketInfo(5, false) },
        { 253, new PacketInfo(2, false) },
        { 72, new PacketInfo(266, false) },
        { 76, new PacketInfo(1591, false) },
        { 74, new PacketInfo(4, true) },
        { 75, new PacketInfo(4, true) },
        { 77, new PacketInfo(5, false) },
        { 78, new PacketInfo(30, false) },
        { 79, new PacketInfo(29, false) },
        { 80, new PacketInfo(5, false) },
        { 91, new PacketInfo(9, false) },
        { 92, new PacketInfo(9, false) },
        { 83, new PacketInfo(2, false) },
        { 85, new PacketInfo(45, false) },
        { 86, new PacketInfo(2, false) },
        { 87, new PacketInfo(1, false) },
        { 88, new PacketInfo(2, false) },
        { 84, new PacketInfo(5, false) },
        { 89, new PacketInfo(7, false) },
        { 155, new PacketInfo(4, true) },
        { 110, new PacketInfo(4, true) },
        { 106, new PacketInfo(5, false) },
        { 111, new PacketInfo(6, false) },
        { 112, new PacketInfo(2, false) },
        { 95, new PacketInfo(59, false) },
        { 119, new PacketInfo(60, false) },
        { 114, new PacketInfo(6, false) },
        { 115, new PacketInfo(5, true) },
        { 107, new PacketInfo(30, false) },
        { 118, new PacketInfo(5, false) },
        { 150, new PacketInfo(6, false) },
        { 121, new PacketInfo(2, false) },
        { 141, new PacketInfo(42, false) },
        { 161, new PacketInfo(9, false) },
        { 99, new PacketInfo(1317, false) },
        { 130, new PacketInfo(3, true) },
        { 123, new PacketInfo(13, false) },
        { 124, new PacketInfo(5, false) },
        { 125, new PacketInfo(43, false) },
        { 126, new PacketInfo(26, false) },
        { 127, new PacketInfo(6, false) },
        { 122, new PacketInfo(2, false) },
        { 128, new PacketInfo(45, false) },
        { 129, new PacketInfo(2, false) },
        { 131, new PacketInfo(27, false) },
        { 132, new PacketInfo(2, false) },
        { 134, new PacketInfo(10, false) },
        { 135, new PacketInfo(10, false) },
        { 152, new PacketInfo(11, true) },
        { 153, new PacketInfo(11, true) },
        { 208, new PacketInfo(133, false) },
        { 209, new PacketInfo(5, false) },
        { 67, new PacketInfo(6, true) },
        { 66, new PacketInfo(50, false) },
        { 214, new PacketInfo(6, true) },
        { 102, new PacketInfo(6, true) },
    };

    public static bool PacketKnown(int header)
    {
        return Map.ContainsKey(header);
    }

    public static PacketInfo GetForHeader(int header)
    {
        return Map[header];
    }

    public int Size { get; } = size;
    public bool IsDynamicSize { get; } = isDynamicSize;
}